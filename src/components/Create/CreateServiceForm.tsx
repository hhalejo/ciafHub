import React, { useState } from "react";
import { supabase } from "../../lib/supabase";

export const CreateServiceForm: React.FC = () => {
  const [category, setCategory] = useState("");
  const [subcategory, setSubcategory] = useState("");
  const [title, setTitle] = useState("");
  const [description, setDescription] = useState("");
  const [price, setPrice] = useState("");

  const categories: Record<string, string[]> = {
    "üìñ Servicios de apoyo al estudio": [
      "Tutor√≠as personalizadas",
      "Preparaci√≥n para parciales/ex√°menes",
      "Resoluci√≥n de dudas r√°pidas",
      "Asesor√≠a en proyectos o trabajos de grado",
      "Traducci√≥n y correcci√≥n de textos",
    ],
    "‚úçÔ∏è Servicios de producci√≥n acad√©mica": [
      "Redacci√≥n de res√∫menes/gu√≠as",
      "Apoyo en presentaciones",
      "Revisi√≥n de ortograf√≠a y estilo",
      "Diagramaci√≥n de documentos (APA, IEEE, etc.)",
    ],
    "üë®‚Äçüíª Servicios digitales / tecnol√≥gicos": [
      "Asesor√≠a en software acad√©mico (Excel, AutoCAD, etc.)",
      "Clases de programaci√≥n o bases de datos",
      "Creaci√≥n de infograf√≠as/mapas conceptuales",
      "Edici√≥n de videos o podcasts",
    ],
    "üë• Servicios colaborativos": [
      "Grupos de estudio por asignatura",
      "Mentor√≠as entre semestres",
      "Intercambio de notas/apuntes",
    ],
    "üåç Servicios con enfoque pr√°ctico": [
      "Pr√°cticas de idiomas entre pares",
      "Preparaci√≥n para exposiciones",
      "Simulacros de entrevistas",
    ],
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    const {
      data: { user },
    } = await supabase.auth.getUser();

    const { error } = await supabase.from("services").insert([
      {
        user_id: user?.id,
        category,
        subcategory,
        title,
        description,
        price,
      },
    ]);

    if (error) {
      console.error(error);
      alert("‚ùå Error al guardar el servicio");
    } else {
      alert("‚úÖ Servicio creado con √©xito");
      setCategory("");
      setSubcategory("");
      setTitle("");
      setDescription("");
      setPrice("");
    }
  };

  return (
    <div className="max-w-2xl mx-auto bg-white p-6 rounded-lg shadow-md">
      <h2 className="text-2xl font-bold mb-4 text-gray-900">
        Crear un nuevo servicio
      </h2>

      <form onSubmit={handleSubmit} className="space-y-4">
        {/* Categor√≠a */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Categor√≠a
          </label>
          <select
            value={category}
            onChange={(e) => {
              setCategory(e.target.value);
              setSubcategory("");
            }}
            className="w-full border rounded-lg px-3 py-2 focus:ring focus:ring-blue-300"
            required
          >
            <option value="">Selecciona una categor√≠a</option>
            {Object.keys(categories).map((cat) => (
              <option key={cat} value={cat}>
                {cat}
              </option>
            ))}
          </select>
        </div>

        {/* Subcategor√≠a */}
        {category && (
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Subcategor√≠a
            </label>
            <select
              value={subcategory}
              onChange={(e) => setSubcategory(e.target.value)}
              className="w-full border rounded-lg px-3 py-2 focus:ring focus:ring-blue-300"
              required
            >
              <option value="">Selecciona un servicio espec√≠fico</option>
              {categories[category].map((sub) => (
                <option key={sub} value={sub}>
                  {sub}
                </option>
              ))}
            </select>
          </div>
        )}

        {/* T√≠tulo */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            T√≠tulo del servicio
          </label>
          <input
            type="text"
            value={title}
            onChange={(e) => setTitle(e.target.value)}
            placeholder="Ej: Tutor√≠as de matem√°ticas para primer semestre"
            className="w-full border rounded-lg px-3 py-2 focus:ring focus:ring-blue-300"
            required
          />
        </div>

        {/* Descripci√≥n */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Descripci√≥n
          </label>
          <textarea
            value={description}
            onChange={(e) => setDescription(e.target.value)}
            placeholder="Explica brevemente en qu√© consiste tu servicio"
            rows={4}
            className="w-full border rounded-lg px-3 py-2 focus:ring focus:ring-blue-300"
            required
          />
        </div>

        {/* Precio */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Precio aproximado (opcional)
          </label>
          <input
            type="text"
            value={price}
            onChange={(e) => setPrice(e.target.value)}
            placeholder="Ej: $20.000 por hora"
            className="w-full border rounded-lg px-3 py-2 focus:ring focus:ring-blue-300"
          />
        </div>

        {/* Bot√≥n */}
        <button
          type="submit"
          className="w-full bg-blue-600 text-white font-semibold py-2 rounded-lg hover:bg-blue-700 transition"
        >
          Publicar servicio
        </button>
      </form>
    </div>
  );
};
